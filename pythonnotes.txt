variables types:

camel case:  each word except the first, start with capital letter Ex.: myValueTiger

Pascal Case: Each word start with the capital letter Ex.: MyValueTiger

smoke Case: Each word will be separated by the underscore character Ex.: My_Value_Tiger.

Many Values to Multiple variables:

python allows you to assign values to multiple variables in one line

Ex.: x, y, z = "Apple", "Banana", "Chery"

print(x)
print(y)
print(z)

-------------------------------------------------------------------------------------------------------
DataTypes Of Python

Text Type: str
Numeric: int, float, complex
sequence: list, tuple, range
Mappting Type: dict(dictionary)
Set Types: set, frozenset
Boolean Type:bool
Binary Types: bytes, bytearray, memoryview
NoneType: NoneType

The python command to know the data type used is : type()-->Function
Ex.: print(type(4))
==========================================================================================================
Strings:

Slicing Strings:

    In this string we can teturn a range of characters by using the slice syntax.
    
    In this we have to specify the start and end index which was separated by a colon to 
    return a part of a string
    
    Example:
    
    b = "Hello, World!"
    print(b[2:5])
Slice From Start:

    By leaving out the start index the range will start at the first charager::
        b = "Hello, World!"
        print(b[:5])
        
        output: Hello
        
Slice  to the End:

    By leaving out the end index, the range will go to the end.
    
    b = "Hello, World!"
    print(b[2:])
    output: lo, World!
    
Negative Indexing:
    Use Negtive indexes to start the slice from the end of the string:
    
    Example:
    b = "Hello, World!"
    print(b[-5:-2])
    Output:
    orl
    
Modify Strings:

Upper Case:

a = "Hello, World!"
print(a.upper())
output: HELLO, WORLD!

Lower Case:

a = "Hello, World!"
print(a.lower())
output: hello, world! 

Remove Whitespace:

Whitespace is the space before and/ or after the actual text, and very often you want to remove this space.
a = "Hello, world!"

print(a.strip())

Output: Hello, World!

Replace String:

a = "Hello, World!"
print(a,replace("H","J"))

String Concatenation:

To concatenate, or combine, two strings you can use the + operator. 

Example:
a = "Hello"
b = "World"
c = a + b
print(c) 

String Format:

    We can combine strings and numbers by using the format() method.
    
    The format() method takes the passed arguments, formats them, and places them in the string where placeholders {} are used.
    
    Example:
    
    age = 36
    txt = "My name is John, and I am {}"
    print(txt.format(age))
    
    Output: 
    My name is John, and I am 36
    
    
Python Operators:

Python divides the operators in the following groups:

Arithmetic operators
Assignment operators
Comparison operators
Logical operators
Identity operators
Membership operators
Bitwise operators

Operator	Name	        Example	
+	        Addition	    x + y	
-	        Subtraction	    x - y	
*	        Multiplication	x * y	
/	        Division	    x / y	
%	        Modulus	        x % y	
**	        Exponentiation	x ** y	
//	        Floor division	x // y	


Python Assignment Operators:

Operator	Example	    Same As	
=	        x = 5	    x = 5	
+=	        x += 3	    x = x + 3	
-=	        x -= 3	    x = x - 3	
*=	        x *= 3	    x = x * 3	
/=	        x /= 3	    x = x / 3	
%=	        x %= 3	    x = x % 3	
//=         x//= 3	    x = x // 3	
**=	        x **= 3	    x = x ** 3	
&=	        x &= 3	    x = x & 3	
|=	        x |= 3	    x = x | 3	
^=	        x ^= 3	    x = x ^ 3	
>>=	        x >>= 3	    x = x >> 3	
<<=	        x <<= 3	    x = x << 3

Python comparison Operators:

Operator	Name	                    Example	
==	        Equal	                    x == y	
!=	        Not equal	                x != y	
>	        Greater than	            x > y	
<	        Less than	                x < y	
>=	        Greater than or equal to	x >= y	
<=	        Less than or equal to	    x <= y


Python Logical Operators:

Operator	    Description	                                    Example	
and 	Returns True if both statements are true	            x < 5 and  x < 10	
or	Returns True if one of the statements is true	            x < 5 or x < 4	
not	Reverse the result, returns False if the result is true	    not(x < 5 and x < 10)

Python Identity Operators:

Operator	Description	                                            Example	
is 	        Returns True if both variables are the same object	    x is y	
is not	    Returns True if both variables are not the same object	x is not y	

Python Bitwise Operators:

Operator	    Name	                Description	                                                    Example	
& 	            AND	                    Sets each bit to 1 if both bits are 1	                        x & y	
|	            OR	                    Sets each bit to 1 if one of two bits is 1	                    x | y	
^	            XOR	                    Sets each bit to 1 if only one of two bits is 1	                x ^ y	
~	            NOT	                    Inverts all the bits	                                        ~x	
<<	            Zero fill left shift	Shift left by pushing zeros in from the right and let the leftmost bits fall off	x << 2	
>>	            Signed right shift	    Shift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off	x >> 2


Operator Precedence:

Operator	    Description	
()	            Parentheses	
**	            Exponentiation	
+x  -x  ~x	    Unary plus, unary minus, and bitwise NOT	
*  /  //  %	    Multiplication, division, floor division, and modulus	
+  -	        Addition and subtraction	
<<  >>	        Bitwise left and right shifts	
&	            Bitwise AND	
^	            Bitwise XOR	
|	            Bitwise OR	
==  !=  >  >=  <  <=  is  is not  in  not in 	Comparisons, identity, and membership operators	
not	            Logical NOT	
and	            AND	
or	            OR


